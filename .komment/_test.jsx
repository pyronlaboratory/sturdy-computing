{"name":"_test.jsx","path":"_test.jsx","content":{"structured":{"description":"","items":[{"id":"442eabff-04a9-40c5-9bb8-1b7610443c31","ancestors":[],"type":"function","name":"Line","location":{"offset":" ","indent":0,"start":7,"insert":7},"code":"({ data, metric, label }) => {\n  \n  const [amount, setAmount] = useState(0);\n  const [delta, setDelta] = useState(0.0);\n  const [points, setPoints] = useState([]);\n  useEffect(() => {\n    if (data.length > 1) {\n      setAmount(\n        data.reduce((acc, current) => {\n          return current[metric] + acc;\n        }, 0),\n      );\n\n      const previous = data[data.length - 2][metric];\n      const latest = data[data.length - 1][metric];\n      setDelta(((100 * (latest - previous)) / previous).toFixed(1));\n\n\n      const _points = [\n        {\n          id: metric,\n          data: data.map((data) => ({\n            x: data.period,\n            y: data[metric],\n          })),\n        },\n      ];\n      setPoints(_points);\n    } else {\n      setAmount(data?.[0]?.[metric]);\n      setDelta(null);\n      setPoints([]);\n    }\n  }, [data]);\n\n  const deltaClasses = classNames(\n    \"delta\",\n    delta >= 0 ? \"positive\" : \"negative\",\n    isFinite(delta) && \"baseline\",\n  );\n\n  return (\n    <div className=\"line\">\n      <div className=\"title\">{label}</div>\n\n      <div className=\"content\">\n        <div className=\"value\">{amount?.toLocaleString(\"en-US\") ?? 0}</div>\n\n        <div>\n          {isFinite(delta) ? (\n            <div className={deltaClasses}>\n              <span>{delta >= 0 ? \"↑\" : \"↓\"}</span>\n              <span className=\"number\">{Math.abs(delta)}</span>\n              <span className=\"percent\">%</span>\n            </div>\n          ) : null}\n        </div>\n      </div>\n\n      \n      \n      <ResponsiveLine\n        data={points}\n        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n        yScale={{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}\n        tooltip={(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}\n        markers={[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}\n        curve={\"natural\"}\n        enableGridX={false}\n        enableGridY={false}\n        lineWidth={1.5}\n        colors={[\"#26de81\"]}\n        pointSize={1}\n        useMesh={true}\n        enableCrosshair={false}\n        theme={{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}\n      />\n    </div>\n  );\n}","params":[{"name":"data","value":null,"type":null},{"name":"metric","value":null,"type":null},{"name":"label","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":116,"comment":{"description":"creates a line chart with two axes, `x` and `y`, based on the provided data. It calculates the line's value and marker positions, and adds tooltips to display the values for each point on the line.","params":[{"name":"data","type":"object","value":null,"description":"2D array of data that is being plotted, which is used to calculate and display various metrics such as the line's value and delta, as well as the points on the line."},{"name":"metric","type":"metric/label for line chart representation.","value":null,"description":"0-based index of an object property to extract from each data point and be used as the x-axis label for the line chart.\n\n\t* `metric`: The name of the metric to be displayed on the line chart.\n\t* `label`: A string label for the line chart.\n\t\n\tThe `useEffect` hook is used to calculate and update the state variables `amount`, `delta`, and `points` based on the input data. The `amount` variable is calculated by reducing the input data to a single value using the `reduce` function, and then setting it as the current value of the state. The `delta` variable is calculated by taking the difference between the previous and latest values in the input data, and then applying a threshold to determine whether the line should be classified as positive or negative. Finally, the `points` array is updated with a new set of objects containing the x and y values for each point on the line chart.\n\t\n\tThe `ResponsiveLine` component is used to render the line chart, which takes several props, including `data`, `margin`, `yScale`, `tooltip`, `markers`, `curve`, `enableGridX`, `enableGridY`, `lineWidth`, `colors`, `pointSize`, and `useMesh`. The `data` prop is used to pass the array of points for the line chart, while the `margin` prop is used to set the margins around the chart. The `yScale` prop is used to define the scale for the y-axis, which is set to a linear scale with a minimum value of 0 and a maximum value equal to the sum of the highest values in the `points` array multiplied by 1.5.\n\t\n\tThe `tooltip` prop is used to define the tooltip text for each point on the chart, which is generated using the `getMonthYear` function to extract the x-value and y-value from the `point` object. The `markers` prop is used to add a line marker to the chart, while the `curve` prop is used to set the curve type for the chart. The `enableGridX` and `enableGridY` props are used to disable the grid lines for the x-axis and y-axis, respectively. The `lineWidth` prop is used to set the width of the line for the chart, while the `colors` prop is used to define the color scheme for the chart. Finally, the `pointSize` prop is used to set the size of each point on the chart, and the `useMesh` prop is used to enable mesh-style rendering for the chart.\n"},{"name":"label","type":"string","value":null,"description":"text label for the line, which is displayed above the line chart."}],"returns":{"type":"array","description":"a line chart with markers and a curve, displaying the specified metric over time."}}},{"id":"09f7a7d0-b8aa-45d8-8e9d-e1822e495d05","ancestors":["1e035b2b-bb54-4eeb-978a-34ce66975e88","442eabff-04a9-40c5-9bb8-1b7610443c31"],"type":"function","name":"<anonymous>","location":{"offset":" ","indent":6,"start":25,"insert":25},"code":"(data) => ({\n            x: data.period,\n            y: data[metric],\n          })","params":[{"name":"data","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"takes an object `data` and extracts two values from it: `x` is the value of `data.period`, while `y` is the value of `data[metric]`.","params":[{"name":"data","type":"object","value":null,"description":"dataset to be processed, providing the necessary information for calculating the output value of the function."}],"returns":{"type":"object","description":"a JSON object containing `x` and `y` properties, where `x` represents the period and `y` represents the metric value."}}},{"id":"57423aac-84c9-41c7-a13e-8c67d872ea8a","ancestors":["442eabff-04a9-40c5-9bb8-1b7610443c31"],"type":"function","name":"ResponsiveLine","location":{"offset":" ","indent":6,"start":68,"insert":68},"code":"<ResponsiveLine\n        data={points}\n        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n        yScale={{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}\n        tooltip={(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}\n        markers={[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}\n        curve={\"natural\"}\n        enableGridX={false}\n        enableGridY={false}\n        lineWidth={1.5}\n        colors={[\"#26de81\"]}\n        pointSize={1}\n        useMesh={true}\n        enableCrosshair={false}\n        theme={{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}\n      />","params":[{"name":"data","value":"{points}","type":null},{"name":"margin","value":"{{ top: 10, right: 10, bottom: 10, left: 10 }}","type":null},{"name":"yScale","value":"{{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}","type":null},{"name":"tooltip","value":"{(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}","type":null},{"name":"markers","value":"{[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}","type":null},{"name":"curve","value":"{\"natural\"}","type":null},{"name":"enableGridX","value":"{false}","type":null},{"name":"enableGridY","value":"{false}","type":null},{"name":"lineWidth","value":"{1.5}","type":null},{"name":"colors","value":"{[\"#26de81\"]}","type":null},{"name":"pointSize","value":"{1}","type":null},{"name":"useMesh","value":"{true}","type":null},{"name":"enableCrosshair","value":"{false}","type":null},{"name":"theme","value":"{{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}","type":null}],"skip":false,"jsx":true,"prompts":"jsx","length":52,"comment":{"description":"generates a line chart with markers and a curve, using the given data to create a visual representation of the data.","params":[{"name":"data","type":"array","value":"{points}","description":"2D dataset to be visualized as a line, providing the x and y values of each point in the dataset."},{"name":"margin","type":"object","value":"{{ top: 10, right: 10, bottom: 10, left: 10 }}","description":"10-pixel buffers applied to each side of the chart, effectively setting the range of visible data based on top, right, bottom, and left margins."},{"name":"yScale","type":"`linear` scale.","value":"{{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}","description":"scale for the y-axis, specifying the minimum and maximum values of the data points, as well as the type of scaling to use (in this case, linear).\n\n\t1. `type`: The scale type is set to \"linear\".\n\t2. `min`: The minimum value is set to 0.\n\t3. `max`: The maximum value is determined by calculating the maximum value among all points in the dataset, and then multiplying it by 1.5 (or scaling it up by 50%). This ensures that the y-axis has sufficient range to display the entirety of the data distribution.\n\t4. `tooltip`: The tooltip text is generated based on the input `delta`. If `delta` is true, the tooltip displays the month and year of each data point. Otherwise, it returns null (i.e., no tooltip is displayed).\n"},{"name":"tooltip","type":"React Element Ref.","value":"{(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}","description":"tooltip content that will be displayed when the user hovers over a specific point on the line chart.\n\n\t* `dataset`: This property refers to the data that is used to generate the line chart. It is an array of objects, where each object represents a single data point on the chart. Each data point consists of `x` and `y` properties, which correspond to the x-axis and y-axis values, respectively.\n\t* `margin`: This property sets the spacing between the lines and the edges of the chart. It is an object with four properties: `top`, `right`, `bottom`, and `left`. Each property sets the spacing value for that respective edge of the chart.\n\t* `yScale`: This property sets the scale for the y-axis values. It is an object with two properties: `type` and `minMax`. The `type` property can be either \"linear\" or \"logarithmic\", depending on the type of scale required. The `minMax` property sets the minimum and maximum values that the y-axis can take.\n\t* `tooltip`: This property refers to a function that is called when the user hovers over a data point on the chart. The function returns an HTML element containing additional information about the data point, such as its x and y coordinates and value.\n\t* `markers`: This property sets the markers for the chart. It is an array of objects, where each object represents a single marker. Each marker has properties for the axis it belongs to (`axis`) and its characteristics, such as color, size, and line style.\n\t* `curve`: This property sets the curve type for the chart. It can be either \"natural\" or \"basis\". The \"natural\" curve is a smooth, continuous line, while the \"basis\" curve is a series of straight lines connecting the data points.\n\t* `enableGridX`: This property sets whether to display the x-axis grid.\n\t* `enableGridY`: This property sets whether to display the y-axis grid.\n\t* `lineWidth`: This property sets the line width for the chart.\n\t* `colors`: This property sets the colors used for the chart. It is an array of strings, each representing a color.\n\t* `pointSize`: This property sets the size of the data points on the chart.\n\t* `useMesh`: This property sets whether to use a mesh for the chart instead of a line.\n\t* `enableCrosshair`: This property sets whether to display a crosshair on the chart when the user hovers over it.\n"},{"name":"markers","type":"object","value":"{[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}","description":"2D markers to be displayed on the line chart, including the default marker for the y-axis and an additional custom marker."},{"name":"curve","type":"string","value":"{\"natural\"}","description":"3D curve used to visualize the data, with options for linear, natural, and others available."},{"name":"enableGridX","type":"boolean","value":"{false}","description":"x-axis grid lines display state, set to `false` to hide them."},{"name":"enableGridY","type":"boolean","value":"{false}","description":"visibility of the grid lines on the y-axis in the chart, with a value of `false` indicating that the grid lines are not visible."},{"name":"lineWidth","type":"number","value":"{1.5}","description":"width of the line used to draw the curve, and it is set to 1.5 in this case to indicate a thick line."},{"name":"colors","type":"array","value":"{[\"#26de81\"]}","description":"1-dimensional array of colors used to color the line marker series."},{"name":"pointSize","type":"integer","value":"{1}","description":"size of each data point marker on the chart, with larger values resulting in bigger markers and smaller values resulting in smaller markers."},{"name":"useMesh","type":"boolean","value":"{true}","description":"3D mesh visualization feature, which is enabled or disabled through its value of `true` or `false`, respectively, allowing for a more detailed and immersive representation of the data in the graph."},{"name":"enableCrosshair","type":"boolean","value":"{false}","description":"enablement of crosshairs feature, which is used to display a vertical line at a specific point on the chart when a user hovers over it with their mouse."},{"name":"theme","type":"object","value":"{{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}","description":"configuration of the visualization's theme, including the axis styling, line width, colors, and other elements."}],"returns":null}}]}}}