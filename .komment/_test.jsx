{"name":"_test.jsx","path":"_test.jsx","content":{"structured":{"description":"","items":[{"id":"9db83d9a-7823-4931-a1c7-235caedb96ba","ancestors":[],"type":"function","name":"Line","location":{"offset":" ","indent":0,"insert":8,"start":8},"params":[{"name":"data","value":null,"type":null},{"name":"metric","value":null,"type":null},{"name":"label","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"docLength":null,"length":116,"comment":{"description":"Uses state to calculate and display line data, including the line's value, delta (change), and markers for each point on the line.","params":[{"name":"data","type":"object","value":null,"description":"2D array of data points that will be plotted on the line chart, and it is used to calculate the line's y value and to populate the tooltip with the correct labels and values."},{"name":"metric","type":"unknown or unspecified type, as it is not specified directly in the provided code snippet.","value":null,"description":"0-based index of the data series to be plotted.\n\n\t* `metric`: The name of the metric to be displayed on the line chart.\n\t* `label`: The label text for the line chart.\n\t\n\tThe `useEffect` hook is used to effectively update the state of the component when the `data` prop changes. Here's what it does:\n\t\n\t* `data.length > 1`: Checks if there are more than one data point in the `data` array. If so, proceed with calculating the line chart.\n\t* `setAmount(data.reduce((acc, current) => { ... }))`: Calculates the total value of all data points by summing up their values using the `reduce` method.\n\t* `const previous = data[data.length - 2][metric]`: Gets the previous value of the metric from the second-to-last data point.\n\t* `const latest = data[data.length - 1][metric]`: Gets the latest value of the metric from the last data point.\n\t* `setDelta(((100 * (latest - previous)) / previous).toFixed(1))`): Calculates and sets the line chart's delta value by taking the difference between the latest and previous values, multiplying it by 100, and then rounding it to one decimal place.\n\t* `const _points = [ ... ]`: Creates an array of points for the line chart.\n\t* `setPoints(_points)`: Updates the component's state with the new array of points.\n\t\n\tThe `deltaClasses` class is defined using the `classNames` function, which takes an array of class names and applies them to the element. In this case, it creates a class that displays the line chart's delta value as either positive, negative, or baseline (i.e., 0) based on its absolute value.\n"},{"name":"label","type":"string","value":null,"description":"text label for the line chart, which is displayed near the line on the chart."}],"returns":{"type":"object","description":"a React component that displays a line graph with points and markers."}}},{"id":"9bbe9f99-b524-4a3a-a69d-2a44495da032","ancestors":["725e9f61-91f4-40db-a95b-17fd19dbf704","9db83d9a-7823-4931-a1c7-235caedb96ba"],"type":"function","name":"<anonymous>","location":{"offset":" ","indent":6,"insert":25,"start":25},"params":[{"name":"data","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"docLength":null,"length":4,"comment":{"description":"Takes a `data` object containing a `period` property and an optional `metric` property. It returns an object with two properties, `x` set to the value of `period`, and `y` set to the value of `metric`.","params":[{"name":"data","type":"object","value":null,"description":"dataset to be processed, providing the `x` coordinate (representing the time period) and the `y` coordinate (representing the metric value)."}],"returns":{"type":"object","description":"a data object with `x` and `y` properties, where `x` represents the given period and `y` represents the value of the specified metric."}}},{"id":"dc6fd5c1-1213-4cd8-9eaa-38f907912687","ancestors":["9db83d9a-7823-4931-a1c7-235caedb96ba"],"type":"function","name":"ResponsiveLine","location":{"offset":" ","indent":6,"insert":69,"start":69},"params":[{"name":"data","value":"{points}","type":null},{"name":"margin","value":"{{ top: 10, right: 10, bottom: 10, left: 10 }}","type":null},{"name":"yScale","value":"{{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}","type":null},{"name":"tooltip","value":"{(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}","type":null},{"name":"markers","value":"{[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}","type":null},{"name":"curve","value":"{\"natural\"}","type":null},{"name":"enableGridX","value":"{false}","type":null},{"name":"enableGridY","value":"{false}","type":null},{"name":"lineWidth","value":"{1.5}","type":null},{"name":"colors","value":"{[\"#26de81\"]}","type":null},{"name":"pointSize","value":"{1}","type":null},{"name":"useMesh","value":"{true}","type":null},{"name":"enableCrosshair","value":"{false}","type":null},{"name":"theme","value":"{{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}","type":null}],"skip":false,"jsx":true,"prompts":"jsx","docLength":null,"length":52,"comment":{"description":"Creates an interactive line plot, with a customizable y-scale and tooltip displaying the month and value for each point on the line.","params":[{"name":"data","type":"array","value":"{points}","description":"2D points data array that will be rendered on the chart as markers."},{"name":"margin","type":"object","value":"{{ top: 10, right: 10, bottom: 10, left: 10 }}","description":"10px padding around the chart, applying to the top, right, bottom, and left borders of the chart area."},{"name":"yScale","type":"linear scale.","value":"{{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}","description":"scalar that defines the range of values displayed on the y-axis, with a minimum value of 0 and a maximum value determined by the maximum value of the `points` array multiplied by a factor of 1.5.\n\n\t* `type`: The type of scaling used for the y-axis is 'linear'.\n\t* `min`: The minimum value on the y-axis is 0.\n\t* `max`: The maximum value on the y-axis is the maximum value among all points in the dataset, which is calculated as the maximum of the `y` values of each point in the first dimension of the input array, multiplied by 1.5.\n\t\n\tNote that if `delta` is true, then a tooltip is displayed for each point on the line, showing the month and year of the corresponding data point.\n"},{"name":"tooltip","type":"element of type ReactNode.","value":"{(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}","description":"content of the tooltip that appears when the user hovers over a point on the line chart, and it is rendered as a React element inside a `div` with a specified CSS class.\n\n\t* `datum`: The current point being rendered on the line.\n\t* `delta`: A boolean indicating whether to display the tooltip for the current point or not. If true, the tooltip will be displayed; otherwise, it will be hidden.\n\t* `getMonthYear()`: A function that formats a date as a string in the format \"month year\". This function is used to display the date in the tooltip.\n\t* `point`: The current point being rendered on the line.\n\t* `x`: The x-coordinate of the current point.\n\t* `y`: The y-coordinate of the current point.\n"},{"name":"markers","type":"object","value":"{[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}","description":"2D markers to be displayed on the line chart, including the default marker for the y-axis and an additional custom marker with specified properties."},{"name":"curve","type":"string","value":"{\"natural\"}","description":"type of curve to use for the line chart, with possible values including \"natural\", \"linear\", and others."},{"name":"enableGridX","type":"boolean","value":"{false}","description":"horizontal grid lines, disabling it hides them from view."},{"name":"enableGridY","type":"boolean","value":"{false}","description":"vertical grid lines in the chart, disabling it will hide them."},{"name":"lineWidth","type":"number","value":"{1.5}","description":"width of the line used to render the mesh, which can be adjusted from 1 to 10."},{"name":"colors","type":"array","value":"{[\"#26de81\"]}","description":"1-dimensional color palette for the line chart, with each color representing a unique point on the chart."},{"name":"pointSize","type":"integer","value":"{1}","description":"point size of the marker, which determines the visual size of each point on the line."},{"name":"useMesh","type":"boolean","value":"{true}","description":"3D mesh visualization feature, which when set to `true`, enables the display of a mesh surface overlaid on top of the line chart, providing a more detailed and interactive representation of the data."},{"name":"enableCrosshair","type":"boolean","value":"{false}","description":"crosshair visibility, which when set to false disables the display of a crosshair marker at the current point on the graph."},{"name":"theme","type":"object","value":"{{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}","description":"axis theme, which sets the appearance of the x-axis and y-axis lines, ticks, and grid, among other options."}],"returns":null}}]}}}