{"name":"_test.jsx","path":"_test.jsx","content":{"structured":{"description":"","items":[{"id":"87c3b9c3-3613-4a72-ac0b-4689ce7be70a","ancestors":[],"type":"function","name":"Line","location":{"offset":" ","indent":0,"insert":8,"start":8},"code":"({ data, metric, label }) => {\n  \n  const [amount, setAmount] = useState(0);\n  const [delta, setDelta] = useState(0.0);\n  const [points, setPoints] = useState([]);\n  useEffect(() => {\n    if (data.length > 1) {\n      setAmount(\n        data.reduce((acc, current) => {\n          return current[metric] + acc;\n        }, 0),\n      );\n\n      const previous = data[data.length - 2][metric];\n      const latest = data[data.length - 1][metric];\n      setDelta(((100 * (latest - previous)) / previous).toFixed(1));\n\n      const _points = [\n        {\n          id: metric,\n          data: data.map((data) => ({\n            x: data.period,\n            y: data[metric],\n          })),\n        },\n      ];\n      setPoints(_points);\n    } else {\n      setAmount(data?.[0]?.[metric]);\n      setDelta(null);\n      setPoints([]);\n    }\n  }, [data]);\n\n  const deltaClasses = classNames(\n    \"delta\",\n    delta >= 0 ? \"positive\" : \"negative\",\n    isFinite(delta) && \"baseline\",\n  );\n\n  return (\n    <div className=\"line\">\n      <div className=\"title\">{label}</div>\n\n      <div className=\"content\">\n        <div className=\"value\">{amount?.toLocaleString(\"en-US\") ?? 0}</div>\n\n        <div>\n          {isFinite(delta) ? (\n            <div className={deltaClasses}>\n              <span>{delta >= 0 ? \"↑\" : \"↓\"}</span>\n              <span className=\"number\">{Math.abs(delta)}</span>\n              <span className=\"percent\">%</span>\n            </div>\n          ) : null}\n        </div>\n      </div>\n\n      \n      \n      \n      <ResponsiveLine\n        data={points}\n        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n        yScale={{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}\n        tooltip={(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}\n        markers={[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}\n        curve={\"natural\"}\n        enableGridX={false}\n        enableGridY={false}\n        lineWidth={1.5}\n        colors={[\"#26de81\"]}\n        pointSize={1}\n        useMesh={true}\n        enableCrosshair={false}\n        theme={{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}\n      />\n    </div>\n  );\n}","params":[{"name":"data","value":null,"type":null},{"name":"metric","value":null,"type":null},{"name":"label","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"docLength":null,"length":116,"comment":{"description":"uses the `useEffect` hook to compute and render a line chart based on an array of data. It handles the calculation and rendering of the line, as well as adding tooltips for points on the line.","params":[{"name":"data","type":"array","value":null,"description":"2D array of data to be visualized, which is used to calculate the line's value and delta, and to populate the tooltip information."},{"name":"metric","type":"string","value":null,"description":"0-based index of a metric in the `data` array, which is used to calculate the line's value and other properties."},{"name":"label","type":"string","value":null,"description":"text displayed alongside the line chart, typically indicating the metric being plotted."}],"returns":{"type":"`ReactElement`.","description":"a line chart showing the given data, with points labeled and a tooltip for each point.\n\n\t* `div.title`: The title of the line.\n\t* `div.content`: The content of the line, which includes the value and a marker for the line.\n\t* `div.value`: The value of the line.\n\t* `div.baseline`: Whether the line is baselined or not.\n\t* `div.negative` or `div.positive`: Whether the line is negative or positive, respectively.\n\t* `div.number`: The number associated with the line.\n\t* `div.percent`: The percentage associated with the line.\n\t* `ResponsiveLine`: A component that renders a responsive line graph.\n\t* `data`: An array of data points.\n\t* `margin`: An object that defines the margins for the graph.\n\t* `yScale`: An object that defines the scale for the y-axis.\n\t* `tooltip`: A function that returns a tooltip for the line.\n\t* `markers`: An array of markers for the line.\n\t* `curve`: The curve type for the line.\n\t* `enableGridX`: Whether to enable the x-axis grid.\n\t* `enableGridY`: Whether to enable the y-axis grid.\n\t* `lineWidth`: The width of the line.\n\t* `colors`: An array of colors for the line.\n\t* `pointSize`: The size of the points on the line.\n\t* `useMesh`: Whether to use a mesh for the line.\n\t* `enableCrosshair`: Whether to enable the crosshair for the line.\n\t* `theme`: An object that defines the theme for the graph.\n\t\n\tNote: The ` Line` function is a reusable component that takes an array of data as input and renders a line graph with customizable properties.\n"}}},{"id":"545f2b0f-97e6-4d3c-9ce0-e78ef802ddad","ancestors":["9ee0610b-aebc-4edc-8466-7d89fce686a7","87c3b9c3-3613-4a72-ac0b-4689ce7be70a"],"type":"function","name":"<anonymous>","location":{"offset":" ","indent":6,"insert":25,"start":25},"code":"(data) => ({\n            x: data.period,\n            y: data[metric],\n          })","params":[{"name":"data","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"docLength":null,"length":4,"comment":{"description":"takes in an object `data` and extracts the values of the `x` property and the value of the `y` property for a specific metric.","params":[{"name":"data","type":"object","value":null,"description":"dataset to be processed, providing the necessary context for the function to operate."}],"returns":{"type":"object","description":"a pair of objects containing the input `x` and `y` values."}}},{"id":"c570d45f-8e4f-4936-a8a3-5b23babcc18f","ancestors":["87c3b9c3-3613-4a72-ac0b-4689ce7be70a"],"type":"function","name":"ResponsiveLine","location":{"offset":" ","indent":6,"insert":69,"start":69},"code":"<ResponsiveLine\n        data={points}\n        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\n        yScale={{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}\n        tooltip={(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}\n        markers={[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}\n        curve={\"natural\"}\n        enableGridX={false}\n        enableGridY={false}\n        lineWidth={1.5}\n        colors={[\"#26de81\"]}\n        pointSize={1}\n        useMesh={true}\n        enableCrosshair={false}\n        theme={{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}\n      />","params":[{"name":"data","value":"{points}","type":null},{"name":"margin","value":"{{ top: 10, right: 10, bottom: 10, left: 10 }}","type":null},{"name":"yScale","value":"{{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}","type":null},{"name":"tooltip","value":"{(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}","type":null},{"name":"markers","value":"{[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}","type":null},{"name":"curve","value":"{\"natural\"}","type":null},{"name":"enableGridX","value":"{false}","type":null},{"name":"enableGridY","value":"{false}","type":null},{"name":"lineWidth","value":"{1.5}","type":null},{"name":"colors","value":"{[\"#26de81\"]}","type":null},{"name":"pointSize","value":"{1}","type":null},{"name":"useMesh","value":"{true}","type":null},{"name":"enableCrosshair","value":"{false}","type":null},{"name":"theme","value":"{{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}","type":null}],"skip":false,"jsx":true,"prompts":"jsx","docLength":null,"length":52,"comment":{"description":"generates a line chart with a custom y-scale based on the length of the data points, and adds a tooltip to display the month and value for each point.","params":[{"name":"data","type":"object","value":"{points}","description":"2D point data to be visualized on the chart, which includes the x and y values of each point."},{"name":"margin","type":"object","value":"{{ top: 10, right: 10, bottom: 10, left: 10 }}","description":"10-pixel buffers added to the top, right, bottom, and left of the chart area to prevent clipping of the lines when they touch the edges of the chart."},{"name":"yScale","type":"`linear` scale.","value":"{{\n          type: \"linear\",\n          min: 0,\n          max: points.length\n            ? Math.max(...points[0].data.map((d) => d.y)) * 1.5\n            : 10000,\n        }}","description":"0-10000 range for the y-axis of the line chart, and sets the minimum and maximum values for each point's y coordinate based on the provided data.\n\n\t* `type`: The scale type is set to \"linear\", indicating that the data will be displayed as a continuous line with no gaps or jumps.\n\t* `min`: The minimum value of the scale is set to 0, which means that the lowest possible y-value is 0.\n\t* `max`: The maximum value of the scale is calculated based on the highest value in the input data array. If there are multiple peaks with the same height, the maximum value will be set to the average of those values. The maximum value is multiplied by 1.5 to create a more dramatic effect when hovering over the line.\n\t* `tooltip`: A tooltip function is defined to display additional information when the user hovers over a point on the line. The function takes a single argument, `datum`, which contains information about the point being hovered over. If `delta` is set to true, the tooltip will display the month and year of the data point, otherwise it will return null.\n"},{"name":"tooltip","type":"ReactElementref.","value":"{(datum) => {\n          if (delta) {\n            return (\n              <div className=\"line-tooltip\">\n                <span className=\"label\">\n                  {getMonthYear(datum.point.data.x)}\n                </span>\n                :<span className=\"value\"> {datum.point.data.y}</span>\n              </div>\n            );\n          } else {\n            return null;\n          }\n        }}","description":"tooltip text to display when the user hovers over a point on the line chart, providing additional information about the data point, such as the date and value.\n\n\t* `tooltip`: If `delta` is true, then `tooltip` returns a React component that displays the date and value of each data point. The component consists of two elements: `<span>` and `<span>`. The first `<span>` has a class of \"label\", and the second `<span>` has a class of \"value\".\n\t* `datum`: The current data point being hovered over.\n\t* `point`: The point being hovered over, with its `x` and `y` coordinates.\n\t* `data`: The array of data points.\n\t\n\tThe various attributes of `tooltip` are:\n\t\n\t* `className`: The class name of the container element for the tooltip.\n\t* `style`: An object of CSS styles to apply to the tooltip container.\n\t* `onHover`: A callback function that is triggered when the user hovers over a data point. The function takes `datum` and `point` as arguments.\n\t\n\tNote: The `tooltip` property is only available if `delta` is set to true.\n"},{"name":"markers","type":"array","value":"{[\n          {\n            axis: \"y\",\n            lineStyle: {\n              stroke: \"#717d86\",\n              strokeWidth: 1.5,\n            },\n            value: 0,\n          },\n        ]}","description":"2D marker collection that displays as lines on the chart, with each line corresponding to a specific value of the data points."},{"name":"curve","type":"string","value":"{\"natural\"}","description":"curvature of the line plot, with possible values being \"natural\", \"linear\", or \"logarithmic\"."},{"name":"enableGridX","type":"boolean","value":"{false}","description":"2D grid display for the line plot, and when set to `false`, it disables the grid lines in the x-axis, making the visualization of the data more fluid and unobstructed."},{"name":"enableGridY","type":"boolean","value":"{false}","description":"vertical grid lines, disabling them will hide them from being displayed on the graph."},{"name":"lineWidth","type":"1.5-valued scalar.","value":"{1.5}","description":"width of the line used to display the generated documentation for the code, with a value of 1.5 in this case.\n\n\t* `lineWidth`: The width of the line representing the chart data.\n\t* `margin`: An object that defines the margins around the chart area.\n\t* `yScale`: A scale defining the range of values for the vertical axis.\n\t* `tooltip`: A function that generates a tooltip element for each point on the line, displaying the x-axis value and y-axis value.\n\t* `markers`: An array of objects defining the markers displayed on the chart. In this case, there is only one marker defined with an axis of \"y\" and a line style.\n\t* `curve`: The type of curve used to draw the line.\n\t* `enableGridX`: Whether to display the grid for the x-axis.\n\t* `enableGridY`: Whether to display the grid for the y-axis.\n\t* `colors`: An array of colors used to fill the markers.\n\t* `pointSize`: The size of each point on the line.\n\t* `useMesh`: Whether to use a mesh or not for the line.\n\t* `enableCrosshair`: Whether to display a crosshair on the chart.\n"},{"name":"colors","type":"array","value":"{[\"#26de81\"]}","description":"6 colors to be used for the line chart's markers, with the value `#26de81` specifying the color of the first marker."},{"name":"pointSize","type":"integer","value":"{1}","description":"size of each point on the line chart, with a value of 1 indicating that each point is sized equally."},{"name":"useMesh","type":"boolean","value":"{true}","description":"3D mesh visualization of the data, which is enabled by default to provide a more detailed and interactive representation of the data."},{"name":"enableCrosshair","type":"boolean","value":"{false}","description":"enablement of a crosshair display on the line chart, with a value of `false` disabling it."},{"name":"theme","type":"object","value":"{{\n          axis: {\n            ticks: {\n              line: {\n                stroke: \"none\",\n              },\n            },\n          },\n        }}","description":"visual theme of the line chart, including options for axis ticks, line styles, and point sizes."}],"returns":null}}]}}}